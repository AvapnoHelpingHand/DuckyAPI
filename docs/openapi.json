{
  "openapi": "3.0.0",
  "info": {
    "title": "DuckyAPI",
    "description": "A customer facing api for WildDuck",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    { "name": "Authentication", "description": "" },
    { "name": "Api Keys", "description": "" },
    { "name": "Domains", "description": "" },
    { "name": "Dkim", "description": "" },
    { "name": "Email Accounts", "description": "" },
    { "name": "Filters", "description": "" },
    { "name": "Forwarders", "description": "" },
    { "name": "Profile", "description": "" },
    { "name": "Users", "description": "" },
    { "name": "Packages", "description": "" }
  ],
  "servers": [{ "url": "http://localhost:3000" }],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "Username of the user you want to login as"
          },
          "password": {
            "type": "string",
            "example": "supersecret",
            "description": "Password of the user you want to login as"
          },
          "rememberMe": {
            "type": "boolean",
            "example": false,
            "description": "Makes the token have a longer expiry time"
          }
        },
        "required": ["username", "password"]
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG5kb2UiLCJzdWIiOiI1ZDM1ZDczZmU0YTY3NzVmYjQxZmE0ZjEiLCJpYXQiOjE1NjM5MTU0OTgsImV4cCI6MTU2MzkxNTc5OH0.qYejtBl1Tcv9IWgp9Ax5FiR6uT_W0VwizHkB-3S7_r0",
            "description": "Access token that can be used to authenticate against the api"
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "example": "2019-09-01T22:12:08.882Z",
            "description": "The expiry date of the access token"
          }
        },
        "required": ["accessToken", "expires"]
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for this user"
          },
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The username for this user"
          },
          "suspended": {
            "type": "boolean",
            "example": false,
            "description": "A suspended user doesn't have access to most api methods, and all accounts and forwarders are suspended"
          },
          "roles": {
            "example": ["user"],
            "description": "User roles",
            "type": "array",
            "items": { "type": "string" }
          },
          "packageId": {
            "type": "string",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Package id for this user"
          },
          "quota": {
            "type": "number",
            "example": 1073741824,
            "description": "Storage quota in bytes, 0 is unlimited"
          },
          "maxSend": {
            "type": "number",
            "example": 200,
            "description": "Max send quota for accounts created by this user, 0 is unlimited"
          },
          "maxReceive": {
            "type": "number",
            "example": 1000,
            "description": "Max recieve quota for accounts created by this user, 0 is unlimited"
          },
          "maxForward": {
            "type": "number",
            "example": 100,
            "description": "Max forward quota for accounts created by this user, 0 is unlimited"
          }
        },
        "required": [
          "_id",
          "username",
          "suspended",
          "roles",
          "packageId",
          "quota",
          "maxSend",
          "maxReceive",
          "maxForward"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The username for this user"
          },
          "password": {
            "type": "string",
            "example": "supersecret",
            "description": "The password for this user"
          },
          "packageId": {
            "type": "string",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Package id to assign to this user"
          }
        },
        "required": ["username", "password"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The username for this user"
          },
          "password": {
            "type": "string",
            "example": "supersecret",
            "description": "The password for this user"
          }
        },
        "required": ["username", "password"]
      },
      "DeleteUserDto": {
        "type": "object",
        "properties": {
          "onlyDeleteDomainsAndSuspend": {
            "type": "boolean",
            "description": "If true will not delete the user, but delete all domains and suspend the user",
            "example": true
          }
        }
      },
      "UpdateUserAdminDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "johndoe",
            "description": "The username for this user"
          },
          "password": {
            "type": "string",
            "example": "supersecret",
            "description": "The password for this user"
          },
          "packageId": {
            "type": "string",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Package id to assign to this user"
          },
          "suspended": {
            "type": "boolean",
            "example": false,
            "description": "A suspended user doesn't have access to most api methods, and all accounts and forwarders are suspended"
          }
        },
        "required": ["username", "password", "packageId", "suspended"]
      },
      "Package": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "object",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for this package",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "Small",
            "description": "Display name to use for this package"
          },
          "quota": {
            "type": "number",
            "example": 1073741824,
            "description": "Storage quota in bytes, 0 is unlimited"
          },
          "maxSend": {
            "type": "number",
            "example": 200,
            "description": "Max send quota for accounts created by this user, 0 is unlimited"
          },
          "maxReceive": {
            "type": "number",
            "example": 1000,
            "description": "Max recieve quota for accounts created by this user, 0 is unlimited"
          },
          "maxForward": {
            "type": "number",
            "example": 100,
            "description": "Max forward quota for accounts created by this user, 0 is unlimited"
          }
        },
        "required": ["name"]
      },
      "DomainAlias": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "example": "example.com",
            "description": "The domain name"
          },
          "dkim": {
            "type": "boolean",
            "example": false,
            "readOnly": true,
            "description": "If DKIM is active for this domain"
          }
        },
        "required": ["domain"]
      },
      "Domain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "example": "example.com",
            "description": "The domain name"
          },
          "dkim": {
            "type": "boolean",
            "example": false,
            "readOnly": true,
            "description": "If DKIM is active for this domain"
          },
          "admin": {
            "type": "boolean",
            "example": true,
            "readOnly": true,
            "description": "If this user is the domain admin, this currently serves no function"
          },
          "aliases": {
            "description": "Domains aliased to this domain",
            "readOnly": true,
            "type": "array",
            "items": { "$ref": "#/components/schemas/DomainAlias" }
          }
        },
        "required": ["domain"]
      },
      "DnsCheckMxRecord": {
        "type": "object",
        "properties": {
          "exchange": {
            "type": "string",
            "example": "mx.example.com",
            "description": "MX record server"
          },
          "priority": {
            "type": "number",
            "example": 1,
            "description": "MX record priority"
          }
        },
        "required": ["exchange", "priority"]
      },
      "DnsCheckDkimRecord": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "example": "default",
            "description": "DKIM record selector"
          },
          "value": {
            "type": "string",
            "example": "v=DKIM1;t=s;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAseRvI//jDgRsZ1BtGixcLO16/B8yEzsgVSBvCWgwf39LRAey14eZLoyyolX7wVUe71VN67cEuey7XlYGHzGntDtLh/CmI8vvDaiym0VNv8zrZok2TbYW0I4Ts9YkNtCUC5EKjyrwX7AT97ZjiXVX6JK+oEmdtgwxtrQc9+trYj3udlStEmpH0yluY3kSmUYDe3e4TEdLUX7+x/i4D8+65dIXdw52cRNka9aMpH7ZdsfPvrFd6y+ItOuX1Zsb8uFdQz21/Tf1aVczwbZgpUFfpyt55erLwfFLdlH7aRwBIJGQDMzl4SFkGgxDuSPjUePHO266PiHm2/r8A0515n3ZCwIDAQAB",
            "description": "DKIM record value"
          }
        },
        "required": ["selector", "value"]
      },
      "DnsCheckCurrentValues": {
        "type": "object",
        "properties": {
          "mx": {
            "description": "List of DNS records",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DnsCheckMxRecord" }
          },
          "spf": {
            "type": "string",
            "example": "v=spf1 include:example.com -all",
            "description": "Value of the SPF record"
          },
          "dkim": {
            "allOf": [
              { "$ref": "#/components/schemas/DnsCheckDkimRecord" },
              { "description": "DKIM record selector and value" }
            ]
          }
        },
        "required": ["mx", "spf"]
      },
      "DnsCheckCorrectValues": {
        "type": "object",
        "properties": {
          "mx": {
            "description": "List of DNS records",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DnsCheckMxRecord" }
          },
          "spf": {
            "type": "string",
            "example": "v=spf1 include:example.com -all",
            "description": "Value of the SPF record"
          },
          "dkim": {
            "allOf": [
              { "$ref": "#/components/schemas/DnsCheckDkimRecord" },
              { "description": "DKIM record selector and value" }
            ]
          }
        },
        "required": ["mx", "spf"]
      },
      "DnsCheckError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "dkim",
            "description": "Type of error/warning. Can be ns, mx, spf, dkim"
          },
          "error": {
            "type": "string",
            "example": "DkimNotFound",
            "description": "Machine readable error/warning string"
          },
          "message": {
            "type": "string",
            "example": "DKIM is enabled, but no record was found",
            "description": "Human readable error/warning message"
          }
        },
        "required": ["type", "error", "message"]
      },
      "DnsCheck": {
        "type": "object",
        "properties": {
          "currentValues": {
            "allOf": [
              { "$ref": "#/components/schemas/DnsCheckCurrentValues" },
              { "description": "Current values of the DNS records" }
            ]
          },
          "correctValues": {
            "allOf": [
              { "$ref": "#/components/schemas/DnsCheckCorrectValues" },
              { "description": "Correct values of the DNS records" }
            ]
          },
          "errors": {
            "description": "List of errors with the DNS records",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DnsCheckError" }
          },
          "warnings": {
            "description": "List of warnings with the DNS records",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DnsCheckError" }
          }
        },
        "required": ["currentValues", "correctValues", "errors", "warnings"]
      },
      "AccountListItemQuota": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 1073741824,
            "description": "How many bytes the account is allowed to use"
          },
          "used": {
            "type": "number",
            "example": 17799833,
            "description": "How many bytes the account is currently using"
          }
        },
        "required": ["allowed", "used"]
      },
      "AccountListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "59cb948ad80a820b68f05230",
            "description": "The unique id of the email account"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the email account"
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address of the email account"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true then the account can not authenticate or receive any new mail"
          },
          "quota": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountListItemQuota" },
              { "description": "Account quota usage and limit" }
            ]
          }
        },
        "required": ["id", "name", "address", "disabled", "quota"]
      },
      "AccountDetailsLimitsQuota": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 1073741824,
            "description": "How many bytes the account is allowed to use"
          },
          "used": {
            "type": "number",
            "example": 2048,
            "description": "How many bytes the account is currently using"
          }
        },
        "required": ["allowed", "used"]
      },
      "AccountDetailsLimitsSend": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 200,
            "description": "How many messages can be sent per period"
          },
          "used": {
            "type": "number",
            "example": 231,
            "description": "How many messages were sent in the current period"
          },
          "ttl": {
            "type": "number",
            "example": 3600,
            "description": "Seconds until the end of the current period"
          }
        },
        "required": ["allowed", "used", "ttl"]
      },
      "AccountDetailsLimitsReceive": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 1000,
            "description": "How many messages can be received per period"
          },
          "used": {
            "type": "number",
            "example": 574,
            "description": "How many messages were received in the current period"
          },
          "ttl": {
            "type": "number",
            "example": 3600,
            "description": "Seconds until the end of the current period"
          }
        },
        "required": ["allowed", "used", "ttl"]
      },
      "AccountDetailsLimitsForward": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 100,
            "description": "How many messages can be forwarded per period"
          },
          "used": {
            "type": "number",
            "example": 56,
            "description": "How many messages were forwarded in the current period"
          },
          "ttl": {
            "type": "number",
            "example": 3600,
            "description": "Seconds until the end of the current period"
          }
        },
        "required": ["allowed", "used", "ttl"]
      },
      "AccountDetailsLimits": {
        "type": "object",
        "properties": {
          "quota": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountDetailsLimitsQuota" },
              { "description": "Storage quota limit and usage" }
            ]
          },
          "send": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountDetailsLimitsSend" },
              {
                "description": "How many emails the account can send in a period"
              }
            ]
          },
          "receive": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountDetailsLimitsReceive" },
              {
                "description": "How many emails the account can receive in a period"
              }
            ]
          },
          "forward": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountDetailsLimitsForward" },
              {
                "description": "How many emails the account can forward in a period"
              }
            ]
          }
        },
        "required": ["quota", "send", "receive", "forward"]
      },
      "AccountDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "59cb948ad80a820b68f05230",
            "description": "The unique id of the email account"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the email account"
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address of the email account"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true then the account can not authenticate or receive any new mail"
          },
          "spamLevel": {
            "type": "number",
            "example": 50,
            "description": "Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam"
          },
          "disabledScopes": {
            "example": ["imap", "pop3"],
            "description": "List of scopes that are disabled for this user",
            "type": "array",
            "items": { "type": "string" }
          },
          "limits": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountDetailsLimits" },
              { "description": "Account limits" }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "address",
          "disabled",
          "spamLevel",
          "disabledScopes",
          "limits"
        ]
      },
      "CreateUpdateAccountLimits": {
        "type": "object",
        "properties": {
          "quota": {
            "type": "number",
            "example": 1073741824,
            "description": "How many bytes the account is allowed to use"
          },
          "send": {
            "type": "number",
            "example": 200,
            "description": "How many emails the account can send in a period"
          },
          "receive": {
            "type": "number",
            "example": 1000,
            "description": "How many emails the account can receive in a period"
          },
          "forward": {
            "type": "number",
            "example": 100,
            "description": "How many emails the account can forward in a period"
          }
        }
      },
      "CreateAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the email account"
          },
          "spamLevel": {
            "type": "number",
            "example": 50,
            "description": "Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam"
          },
          "limits": {
            "allOf": [
              { "$ref": "#/components/schemas/CreateUpdateAccountLimits" },
              { "description": "Account limits" }
            ]
          },
          "disabledScopes": {
            "example": ["imap", "pop3"],
            "description": "List of scopes that are disabled for this user",
            "type": "array",
            "items": { "type": "string" }
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address of the email account"
          },
          "password": {
            "type": "string",
            "example": "verysecret",
            "description": "The new password of the email account"
          }
        },
        "required": ["limits", "address", "password"]
      },
      "UpdateAccountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the email account"
          },
          "spamLevel": {
            "type": "number",
            "example": 50,
            "description": "Relative scale for detecting spam. 0 means that everything is spam, 100 means that nothing is spam"
          },
          "limits": {
            "allOf": [
              { "$ref": "#/components/schemas/CreateUpdateAccountLimits" },
              { "description": "Account limits" }
            ]
          },
          "disabledScopes": {
            "example": ["imap", "pop3"],
            "description": "List of scopes that are disabled for this user",
            "type": "array",
            "items": { "type": "string" }
          },
          "password": {
            "type": "string",
            "example": "verysecret",
            "description": "The new password of the email account"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true then the account can not authenticate or receive any new mail"
          }
        },
        "required": ["limits"]
      },
      "DnsTxt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ducky._domainkey.example.com",
            "description": "Domain name to which the TXT record should be added"
          },
          "value": {
            "type": "string",
            "example": "v=DKIM1;t=s;p=MIGfMA0...",
            "description": "Value of the TXT record"
          }
        },
        "required": ["name", "value"]
      },
      "DkimKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "59ef21aef255ed1d9d790e7a",
            "description": "Unique id of the DKIM key"
          },
          "domain": {
            "type": "string",
            "example": "example.com",
            "description": "The domain this DKIM key applies to"
          },
          "selector": {
            "type": "string",
            "example": "ducky",
            "description": "DKIM selector"
          },
          "fingerprint": {
            "type": "string",
            "example": "6a:aa:d7:ba:e4:99:b4:12:e0:f3:35:01:71:d4:f1:d6:b4:95:c4:f5",
            "description": "Unique id of the DKIM key"
          },
          "publicKey": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----\r\nMIGfMA0...",
            "description": "Public key in DNS format (no prefix/suffix, single line)"
          },
          "dnsTxt": {
            "allOf": [
              { "$ref": "#/components/schemas/DnsTxt" },
              { "description": "Value for the DNS TXT record" }
            ]
          },
          "created": {
            "type": "string",
            "example": "2017-10-24T11:19:10.911Z",
            "description": "Datestring of the time the DKIM key was created"
          }
        },
        "required": [
          "id",
          "domain",
          "selector",
          "fingerprint",
          "publicKey",
          "dnsTxt",
          "created"
        ]
      },
      "AddDkimDto": {
        "type": "object",
        "properties": {
          "selector": {
            "type": "string",
            "example": "default",
            "description": "Selector for dkim key"
          },
          "privateKey": {
            "type": "string",
            "example": "-----BEGIN RSA PRIVATE KEY-----...",
            "description": "Pem formatted DKIM private key. If not set then a new 2048 bit RSA key is generated, beware though that it can take several seconds to complete"
          }
        },
        "required": ["selector"]
      },
      "Forwarder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "59cb948ad80a820b68f05230",
            "description": "The unique id of the forwarder"
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address of the forwarder"
          }
        },
        "required": ["id", "address"]
      },
      "ForwarderDetailsForwards": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "number",
            "example": 100,
            "description": "How many messages can be forwarded per period"
          },
          "used": {
            "type": "number",
            "example": 56,
            "description": "How many messages were forwarded in the current period"
          },
          "ttl": {
            "type": "number",
            "example": 3600,
            "description": "Seconds until the end of the current period"
          }
        },
        "required": ["allowed", "used", "ttl"]
      },
      "ForwarderDetailsLimits": {
        "type": "object",
        "properties": {
          "forward": {
            "allOf": [
              { "$ref": "#/components/schemas/ForwarderDetailsForwards" },
              { "description": "Forwarding quota" }
            ]
          }
        },
        "required": ["forward"]
      },
      "ForwarderDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "59cb948ad80a820b68f05230",
            "description": "The unique id of the forwarder"
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address of the forwarder"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Identity name"
          },
          "targets": {
            "example": [
              "johndoe@example.com",
              "smtp://mx.example.com:25",
              "https://example.com"
            ],
            "description": "List of forwarding targets",
            "type": "array",
            "items": { "type": "string" }
          },
          "limits": {
            "allOf": [
              { "$ref": "#/components/schemas/ForwarderDetailsLimits" },
              { "description": "Forwarder limits and usage" }
            ]
          }
        },
        "required": ["id", "address", "name", "targets", "limits"]
      },
      "CreateUpdateForwarderCommonDtoLimits": {
        "type": "object",
        "properties": {
          "forward": {
            "type": "number",
            "example": 600,
            "description": "How many messages can be forwarded per period"
          }
        }
      },
      "CreateForwarderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Identity name"
          },
          "targets": {
            "example": [
              "johndoe@example.com",
              "smtp://mx.example.com:25",
              "https://example.com"
            ],
            "description": "An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to",
            "type": "array",
            "items": { "type": "string" }
          },
          "limits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateUpdateForwarderCommonDtoLimits"
              },
              { "description": "Limits for this forwarder" }
            ]
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address that should be forwarded"
          }
        },
        "required": ["limits", "address"]
      },
      "UpdateForwarderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Identity name"
          },
          "targets": {
            "example": [
              "johndoe@example.com",
              "smtp://mx.example.com:25",
              "https://example.com"
            ],
            "description": "An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to",
            "type": "array",
            "items": { "type": "string" }
          },
          "limits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateUpdateForwarderCommonDtoLimits"
              },
              { "description": "Limits for this forwarder" }
            ]
          },
          "address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The E-Mail address that should be forwarded"
          }
        },
        "required": ["limits"]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "pnx97h6p64t4gau6vbub-",
            "description": "Unique id for this api key",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "API key for my script",
            "description": "Name of api key"
          },
          "issuedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2019-09-01T22:12:08.882Z",
            "description": "Date the api key was issued",
            "readOnly": true
          }
        },
        "required": ["name"]
      },
      "ApiKeyAccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG5kb2UiLCJzdWIiOiI1ZDM1ZDczZmU0YTY3NzVmYjQxZmE0ZjEiLCJpYXQiOjE1NjM5MTU0OTgsImV4cCI6MTU2MzkxNTc5OH0.qYejtBl1Tcv9IWgp9Ax5FiR6uT_W0VwizHkB-3S7_r0",
            "description": "API key that can be used to authenticate against the api"
          },
          "details": {
            "allOf": [
              { "$ref": "#/components/schemas/ApiKey" },
              { "description": "API key details" }
            ]
          }
        },
        "required": ["accessToken", "details"]
      },
      "FilterListItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mark as seen from John",
            "description": "The name of the filter"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true, then this filter is ignored"
          },
          "id": {
            "type": "string",
            "example": "5a1c0ee490a34c67e266931c",
            "description": "Unique id of the filter"
          },
          "query": {
            "example": [
              ["from", "(John)"],
              ["to", "(John)"]
            ],
            "description": "A list of query descriptions",
            "type": "array",
            "items": { "type": "string" }
          },
          "action": {
            "example": [
              ["mark it as spam"],
              [
                "forward to",
                "johndoe@example.com, smtp://mx.example.com:25, example.com"
              ]
            ],
            "description": "A list of action descriptions",
            "type": "array",
            "items": { "type": "string" }
          },
          "created": {
            "type": "string",
            "example": "2019-08-14T15:14:25.176Z",
            "description": "Datestring of the time the filter was created"
          }
        },
        "required": ["id", "query", "action", "created"]
      },
      "Query": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "John",
            "description": "Partial match for the From: header (case insensitive)"
          },
          "to": {
            "type": "string",
            "example": "John",
            "description": "Partial match for the To:/Cc: headers (case insensitive)"
          },
          "subject": {
            "type": "string",
            "example": "You have 1 new notification",
            "description": "Partial match for the Subject: header (case insensitive)"
          },
          "listId": {
            "type": "string",
            "example": "John's list",
            "description": "Partial match for the List-ID: header (case insensitive)"
          },
          "text": {
            "type": "string",
            "example": "Dedicated servers",
            "description": "Fulltext search against message text"
          },
          "ha": {
            "type": "boolean",
            "example": false,
            "description": "Does a message have to have an attachment or not"
          },
          "size": {
            "type": "number",
            "example": 1000,
            "description": "Message size in bytes. If the value is a positive number then message needs to be larger, if negative then message needs to be smaller than abs(size) value"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "seen": {
            "type": "boolean",
            "example": true,
            "description": "If true then mark matching messages as Seen"
          },
          "flag": {
            "type": "boolean",
            "example": true,
            "description": "If true then mark matching messages as Flagged"
          },
          "delete": {
            "type": "boolean",
            "example": true,
            "description": "If true then do not store matching messages"
          },
          "spam": {
            "type": "boolean",
            "example": true,
            "description": "If true then store matching messags to Junk Mail folder"
          },
          "mailbox": {
            "type": "string",
            "example": "5a1c0ee490a34c67e266932c",
            "description": "Mailbox ID to store matching messages to"
          },
          "targets": {
            "example": [
              "johndoe@example.com",
              "smtp://mx.example.com:25",
              "https://example.com"
            ],
            "description": "An array of forwarding targets. The value could either be an email address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\") or an URL where mail contents are POSTed to",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "FilterDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mark as seen from John",
            "description": "The name of the filter"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true, then this filter is ignored"
          },
          "query": {
            "allOf": [
              { "$ref": "#/components/schemas/Query" },
              { "description": "Rules that a message must match" }
            ]
          },
          "action": {
            "allOf": [
              { "$ref": "#/components/schemas/Action" },
              { "description": "Rules that a message must match" }
            ]
          },
          "id": {
            "type": "string",
            "example": "5a1c0ee490a34c67e266931c",
            "description": "Unique id of the filter"
          }
        },
        "required": ["query", "action", "id"]
      },
      "CreateUpdateFilterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mark as seen from John",
            "description": "The name of the filter"
          },
          "disabled": {
            "type": "boolean",
            "example": false,
            "description": "If true, then this filter is ignored"
          },
          "query": {
            "allOf": [
              { "$ref": "#/components/schemas/Query" },
              { "description": "Rules that a message must match" }
            ]
          },
          "action": {
            "allOf": [
              { "$ref": "#/components/schemas/Action" },
              { "description": "Rules that a message must match" }
            ]
          }
        },
        "required": ["query", "action"]
      }
    }
  },
  "paths": {
    "/authentication": {
      "delete": {
        "operationId": "revokeAllAccessTokens",
        "summary": "Revoke previous access tokens",
        "description": "Note: This resource is forbidden when using an API key as authorization. Use an access token.",
        "parameters": [],
        "responses": {
          "200": { "description": "Successfully expired previous tokens" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Authentication"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/authentication \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/authentication\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/authentication\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/authentication\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/authentication\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/authentication\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/authentication\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/authentication\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "getAccessToken",
        "summary": "Get an access token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessToken" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid username or password" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Authentication"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/authentication \\\n  --header 'content-type: application/json' \\\n  --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"rememberMe\":false}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/authentication\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({username: 'johndoe', password: 'supersecret', rememberMe: false}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"username\": \"johndoe\",\n  \"password\": \"supersecret\",\n  \"rememberMe\": false\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/authentication\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"rememberMe\\\":false}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/authentication\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/authentication\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"rememberMe\\\":false}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/authentication\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"rememberMe\\\":false}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/authentication\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"rememberMe\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/authentication\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"rememberMe\\\":false}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "getUsers",
        "summary": "[Admin only] List all users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Users"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/users \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/users\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/users\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/users\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "createUser",
        "summary": "[Admin only] Create new API user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "User successfully created" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Users"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/users \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"packageId\":\"5d49e11f600a423ffc0b1297\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  username: 'johndoe',\n  password: 'supersecret',\n  packageId: '5d49e11f600a423ffc0b1297'\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"username\": \"johndoe\",\n  \"password\": \"supersecret\",\n  \"packageId\": \"5d49e11f600a423ffc0b1297\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/users\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "getMe",
        "summary": "Get account info for current access token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Profile"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/users/me \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users/me\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/users/me\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/users/me\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users/me\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/users/me\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users/me\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users/me\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateMe",
        "summary": "Update username/password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Profile"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/users/me \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"username\":\"johndoe\",\"password\":\"supersecret\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users/me\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({username: 'johndoe', password: 'supersecret'}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"username\": \"johndoe\",\n  \"password\": \"supersecret\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/users/me\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/users/me\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users/me\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/users/me\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users/me\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users/me\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "operationId": "deleteUser",
        "summary": "[Admin only] Delete API user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for the user",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DeleteUserDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "User successfully deleted" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Users"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/users/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"onlyDeleteDomainsAndSuspend\":true}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({onlyDeleteDomainsAndSuspend: true}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"onlyDeleteDomainsAndSuspend\": true\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/users/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"onlyDeleteDomainsAndSuspend\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/users/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"onlyDeleteDomainsAndSuspend\\\":true}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/users/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"onlyDeleteDomainsAndSuspend\\\":true}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"onlyDeleteDomainsAndSuspend\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users/%7Bid%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"onlyDeleteDomainsAndSuspend\\\":true}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateUser",
        "summary": "[Admin only] Update API user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for the user",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserAdminDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "security": [{ "bearer": [] }],
        "tags": ["Users"],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/users/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"packageId\":\"5d49e11f600a423ffc0b1297\",\"suspended\":false}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/users/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  username: 'johndoe',\n  password: 'supersecret',\n  packageId: '5d49e11f600a423ffc0b1297',\n  suspended: false\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"username\": \"johndoe\",\n  \"password\": \"supersecret\",\n  \"packageId\": \"5d49e11f600a423ffc0b1297\",\n  \"suspended\": false\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/users/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\",\\\"suspended\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/users/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/users/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\",\\\"suspended\\\":false}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/users/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\",\\\"suspended\\\":false}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/users/%7Bid%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\",\\\"suspended\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/users/%7Bid%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"username\\\":\\\"johndoe\\\",\\\"password\\\":\\\"supersecret\\\",\\\"packageId\\\":\\\"5d49e11f600a423ffc0b1297\\\",\\\"suspended\\\":false}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/packages": {
      "get": {
        "operationId": "getPackages",
        "summary": "[Admin only] Get a list of packages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Package" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Packages"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/packages \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/packages\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/packages\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/packages\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/packages\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/packages\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/packages\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/packages\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "createPackage",
        "summary": "[Admin only] Create package",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Package" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created package",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Package" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Packages"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/packages \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Small\",\"quota\":1073741824,\"maxSend\":200,\"maxReceive\":1000,\"maxForward\":100}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/packages\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Small',\n  quota: 1073741824,\n  maxSend: 200,\n  maxReceive: 1000,\n  maxForward: 100\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"Small\",\n  \"quota\": 1073741824,\n  \"maxSend\": 200,\n  \"maxReceive\": 1000,\n  \"maxForward\": 100\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/packages\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/packages\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/packages\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/packages\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/packages\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/packages\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/packages/{id}": {
      "put": {
        "operationId": "updatePackage",
        "summary": "[Admin only] Update package",
        "description": "Will also update quota for existing users, except if you modified the users quota manually.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for the package",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Package" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated package",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Package" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Packages"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/packages/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Small\",\"quota\":1073741824,\"maxSend\":200,\"maxReceive\":1000,\"maxForward\":100}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/packages/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Small',\n  quota: 1073741824,\n  maxSend: 200,\n  maxReceive: 1000,\n  maxForward: 100\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"Small\",\n  \"quota\": 1073741824,\n  \"maxSend\": 200,\n  \"maxReceive\": 1000,\n  \"maxForward\": 100\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/packages/%7Bid%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/packages/%7Bid%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/packages/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/packages/%7Bid%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/packages/%7Bid%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/packages/%7Bid%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"Small\\\",\\\"quota\\\":1073741824,\\\"maxSend\\\":200,\\\"maxReceive\\\":1000,\\\"maxForward\\\":100}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "delete": {
        "operationId": "deletePackage",
        "summary": "[Admin only] Delete package",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "5d49e11f600a423ffc0b1297",
            "description": "Unique id for the package",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted package",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Package" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Packages"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/packages/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/packages/%7Bid%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/packages/%7Bid%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/packages/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/packages/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/packages/%7Bid%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/packages/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/packages/%7Bid%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains/{domain}": {
      "delete": {
        "operationId": "deleteDomain",
        "summary": "Delete a domain",
        "description": "WARNING: This will also delete any email accounts, forwarders, and DKIM keys associated with this domain",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Domain successfully deleted" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found on account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/domains/%7Bdomain%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7Bdomain%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/domains/%7Bdomain%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/domains/%7Bdomain%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7Bdomain%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/domains/%7Bdomain%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7Bdomain%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7Bdomain%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains": {
      "get": {
        "operationId": "getDomains",
        "summary": "List domains",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Domain" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/domains \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/domains\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/domains\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/domains\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "addDomain",
        "summary": "Add a domain",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Domain" }
            }
          }
        },
        "responses": {
          "201": { "description": "Domain successfully added" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/domains \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"domain\":\"example.com\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({domain: 'example.com'}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"domain\": \"example.com\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/domains\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"domain\\\":\\\"example.com\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/domains\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"domain\\\":\\\"example.com\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/domains\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"domain\\\":\\\"example.com\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"domain\\\":\\\"example.com\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"domain\\\":\\\"example.com\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains/{domain}/DNS": {
      "get": {
        "operationId": "checkDNS",
        "summary": "Get and check DNS records",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The current and the correct DNS records for this domain",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DnsCheck" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found on account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/domains/%7Bdomain%7D/DNS \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7Bdomain%7D/DNS\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/domains/%7Bdomain%7D/DNS\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/domains/%7Bdomain%7D/DNS\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7Bdomain%7D/DNS\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/domains/%7Bdomain%7D/DNS\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7Bdomain%7D/DNS\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7Bdomain%7D/DNS\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains/{domain}/aliases": {
      "post": {
        "operationId": "addAlias",
        "summary": "Add a domain alias",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DomainAlias" }
            }
          }
        },
        "responses": {
          "201": { "description": "Alias successfully added" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found on account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/domains/%7Bdomain%7D/aliases \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"domain\":\"example.com\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7Bdomain%7D/aliases\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({domain: 'example.com'}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"domain\": \"example.com\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/domains/%7Bdomain%7D/aliases\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"domain\\\":\\\"example.com\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/domains/%7Bdomain%7D/aliases\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7Bdomain%7D/aliases\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"domain\\\":\\\"example.com\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/domains/%7Bdomain%7D/aliases\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"domain\\\":\\\"example.com\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7Bdomain%7D/aliases\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"domain\\\":\\\"example.com\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7Bdomain%7D/aliases\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"domain\\\":\\\"example.com\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains/{domain}/aliases/{alias}": {
      "delete": {
        "operationId": "deleteAlias",
        "summary": "Delete a domain alias",
        "parameters": [
          {
            "name": "domain",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          },
          {
            "name": "alias",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": { "description": "Alias successfully deleted" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found on account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Domains"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7Bdomain%7D/aliases/%7Balias%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/domains/%7Bdomain%7D/aliases/%7Balias%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/accounts/{accountId}": {
      "delete": {
        "operationId": "deleteAccount",
        "summary": "Delete email account",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Account deleted successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Email Accounts"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/accounts/%7BaccountId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/accounts/%7BaccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/accounts/%7BaccountId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "get": {
        "operationId": "getAccountDetails",
        "summary": "Get email account details",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountDetails" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Email Accounts"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/accounts/%7BaccountId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/accounts/%7BaccountId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/accounts/%7BaccountId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateAccount",
        "summary": "Update existing email account",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAccountDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Account updated successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Email Accounts"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"John Doe\",\"spamLevel\":50,\"limits\":{\"quota\":1073741824,\"send\":200,\"receive\":1000,\"forward\":100},\"disabledScopes\":[\"imap\",\"pop3\"],\"password\":\"verysecret\",\"disabled\":false}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'John Doe',\n  spamLevel: 50,\n  limits: {quota: 1073741824, send: 200, receive: 1000, forward: 100},\n  disabledScopes: ['imap', 'pop3'],\n  password: 'verysecret',\n  disabled: false\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"John Doe\",\n  \"spamLevel\": 50,\n  \"limits\": {\n    \"quota\": 1073741824,\n    \"send\": 200,\n    \"receive\": 1000,\n    \"forward\": 100\n  },\n  \"disabledScopes\": [\n    \"imap\",\n    \"pop3\"\n  ],\n  \"password\": \"verysecret\",\n  \"disabled\": false\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/accounts/%7BaccountId%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"password\\\":\\\"verysecret\\\",\\\"disabled\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/accounts/%7BaccountId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"password\\\":\\\"verysecret\\\",\\\"disabled\\\":false}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/accounts/%7BaccountId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"password\\\":\\\"verysecret\\\",\\\"disabled\\\":false}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"password\\\":\\\"verysecret\\\",\\\"disabled\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"password\\\":\\\"verysecret\\\",\\\"disabled\\\":false}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/accounts": {
      "get": {
        "operationId": "getAccounts",
        "summary": "List email accounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AccountListItem" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Email Accounts"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/accounts \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/accounts\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/accounts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/accounts\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "createAccount",
        "summary": "Create a new email account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAccountDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Account created successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Email Accounts"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/accounts \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"John Doe\",\"spamLevel\":50,\"limits\":{\"quota\":1073741824,\"send\":200,\"receive\":1000,\"forward\":100},\"disabledScopes\":[\"imap\",\"pop3\"],\"address\":\"john@example.com\",\"password\":\"verysecret\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'John Doe',\n  spamLevel: 50,\n  limits: {quota: 1073741824, send: 200, receive: 1000, forward: 100},\n  disabledScopes: ['imap', 'pop3'],\n  address: 'john@example.com',\n  password: 'verysecret'\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"John Doe\",\n  \"spamLevel\": 50,\n  \"limits\": {\n    \"quota\": 1073741824,\n    \"send\": 200,\n    \"receive\": 1000,\n    \"forward\": 100\n  },\n  \"disabledScopes\": [\n    \"imap\",\n    \"pop3\"\n  ],\n  \"address\": \"john@example.com\",\n  \"password\": \"verysecret\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/accounts\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"address\\\":\\\"john@example.com\\\",\\\"password\\\":\\\"verysecret\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/accounts\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"address\\\":\\\"john@example.com\\\",\\\"password\\\":\\\"verysecret\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/accounts\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"address\\\":\\\"john@example.com\\\",\\\"password\\\":\\\"verysecret\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"address\\\":\\\"john@example.com\\\",\\\"password\\\":\\\"verysecret\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"John Doe\\\",\\\"spamLevel\\\":50,\\\"limits\\\":{\\\"quota\\\":1073741824,\\\"send\\\":200,\\\"receive\\\":1000,\\\"forward\\\":100},\\\"disabledScopes\\\":[\\\"imap\\\",\\\"pop3\\\"],\\\"address\\\":\\\"john@example.com\\\",\\\"password\\\":\\\"verysecret\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/domains/{domainOrAlias}/dkim": {
      "delete": {
        "operationId": "deleteDkim",
        "summary": "Delete DKIM key for a domain",
        "parameters": [
          {
            "name": "domainOrAlias",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "DKIM key successfully deleted" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found in account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Dkim"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7BdomainOrAlias%7D/dkim\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/domains/%7BdomainOrAlias%7D/dkim\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "get": {
        "operationId": "getDkim",
        "summary": "Get DKIM key info for a domain",
        "parameters": [
          {
            "name": "domainOrAlias",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "DKIM key info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DkimKey" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found in account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Dkim"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7BdomainOrAlias%7D/dkim\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/domains/%7BdomainOrAlias%7D/dkim\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateDkim",
        "summary": "Add or update DKIM key for a domain",
        "parameters": [
          {
            "name": "domainOrAlias",
            "required": true,
            "in": "path",
            "description": "example.com",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddDkimDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DKIM key info",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DkimKey" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "Domain not found in account" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Dkim"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"selector\":\"default\",\"privateKey\":\"-----BEGIN RSA PRIVATE KEY-----...\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/domains/%7BdomainOrAlias%7D/dkim\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({selector: 'default', privateKey: '-----BEGIN RSA PRIVATE KEY-----...'}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"selector\": \"default\",\n  \"privateKey\": \"-----BEGIN RSA PRIVATE KEY-----...\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"selector\\\":\\\"default\\\",\\\"privateKey\\\":\\\"-----BEGIN RSA PRIVATE KEY-----...\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/domains/%7BdomainOrAlias%7D/dkim\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"selector\\\":\\\"default\\\",\\\"privateKey\\\":\\\"-----BEGIN RSA PRIVATE KEY-----...\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"selector\\\":\\\"default\\\",\\\"privateKey\\\":\\\"-----BEGIN RSA PRIVATE KEY-----...\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"selector\\\":\\\"default\\\",\\\"privateKey\\\":\\\"-----BEGIN RSA PRIVATE KEY-----...\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"selector\\\":\\\"default\\\",\\\"privateKey\\\":\\\"-----BEGIN RSA PRIVATE KEY-----...\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/forwarders/{forwarderId}": {
      "delete": {
        "operationId": "deleteForwarder",
        "summary": "Delete forwarder",
        "parameters": [
          {
            "name": "forwarderId",
            "required": true,
            "in": "path",
            "description": "Unique id of the forwarder",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Forwarder deleted successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No forwarder found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Forwarders"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/forwarders/%7BforwarderId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/forwarders/%7BforwarderId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/forwarders/%7BforwarderId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/forwarders/%7BforwarderId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "get": {
        "operationId": "getForwarderDetails",
        "summary": "Get forwarder details",
        "parameters": [
          {
            "name": "forwarderId",
            "required": true,
            "in": "path",
            "description": "Unique id of the forwarder",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Forwarder details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForwarderDetails" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No forwarder found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Forwarders"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/forwarders/%7BforwarderId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/forwarders/%7BforwarderId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/forwarders/%7BforwarderId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/forwarders/%7BforwarderId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateForwarder",
        "summary": "Update existing forwarder",
        "parameters": [
          {
            "name": "forwarderId",
            "required": true,
            "in": "path",
            "description": "Unique id of the forwarder",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateForwarderDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Forwarder updated successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No forwarder found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Forwarders"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"John Doe\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"],\"limits\":{\"forward\":600},\"address\":\"john@example.com\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/forwarders/%7BforwarderId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'John Doe',\n  targets: ['johndoe@example.com', 'smtp://mx.example.com:25', 'https://example.com'],\n  limits: {forward: 600},\n  address: 'john@example.com'\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"John Doe\",\n  \"targets\": [\n    \"johndoe@example.com\",\n    \"smtp://mx.example.com:25\",\n    \"https://example.com\"\n  ],\n  \"limits\": {\n    \"forward\": 600\n  },\n  \"address\": \"john@example.com\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/forwarders/%7BforwarderId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/forwarders/%7BforwarderId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/forwarders/%7BforwarderId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/forwarders/%7BforwarderId%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/forwarders/%7BforwarderId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/forwarders": {
      "get": {
        "operationId": "getForwarders",
        "summary": "List forwarders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of forwarders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Forwarder" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Forwarders"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/forwarders \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/forwarders\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/forwarders\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/forwarders\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/forwarders\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/forwarders\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/forwarders\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/forwarders\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "createForwarder",
        "summary": "Create a new forwarder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateForwarderDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Forwarder created successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Forwarders"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/forwarders \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"John Doe\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"],\"limits\":{\"forward\":600},\"address\":\"john@example.com\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/forwarders\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'John Doe',\n  targets: ['johndoe@example.com', 'smtp://mx.example.com:25', 'https://example.com'],\n  limits: {forward: 600},\n  address: 'john@example.com'\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"John Doe\",\n  \"targets\": [\n    \"johndoe@example.com\",\n    \"smtp://mx.example.com:25\",\n    \"https://example.com\"\n  ],\n  \"limits\": {\n    \"forward\": 600\n  },\n  \"address\": \"john@example.com\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/forwarders\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/forwarders\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/forwarders\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/forwarders\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/forwarders\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/forwarders\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"John Doe\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"],\\\"limits\\\":{\\\"forward\\\":600},\\\"address\\\":\\\"john@example.com\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/apikeys": {
      "post": {
        "operationId": "createApiKey",
        "summary": "Create an API key",
        "description": "Note: This resource is forbidden when using an API key as authorization. Use an access token.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApiKey" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiKeyAccessToken" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Api Keys"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/apikeys \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"API key for my script\"}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/apikeys\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({name: 'API key for my script'}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"API key for my script\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/apikeys\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"API key for my script\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/apikeys\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/apikeys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"API key for my script\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/apikeys\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"API key for my script\\\"}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/apikeys\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"API key for my script\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/apikeys\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"API key for my script\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "get": {
        "operationId": "getApiKeys",
        "summary": "List active api keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of active api keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ApiKey" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Api Keys"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/apikeys \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/apikeys\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/apikeys\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/apikeys\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/apikeys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/apikeys\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/apikeys\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/apikeys\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/apikeys/{id}": {
      "delete": {
        "operationId": "revokeApiKey",
        "summary": "Revoke api key",
        "description": "Note: This resource is forbidden when using an API key as authorization. Use an access token.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "example": "pnx97h6p64t4gau6vbub-",
            "description": "Unique id of the api key",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Api key revoked" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Api Keys"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/apikeys/%7Bid%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/apikeys/%7Bid%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/apikeys/%7Bid%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/apikeys/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/apikeys/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/apikeys/%7Bid%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/apikeys/%7Bid%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/apikeys/%7Bid%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/accounts/{accountId}/filters/{filterId}": {
      "delete": {
        "operationId": "deleteFilter",
        "summary": "Delete filter",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          },
          {
            "name": "filterId",
            "required": true,
            "in": "path",
            "description": "Unique id of the filter",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Filter deleted successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account or filter found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Filters"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request DELETE \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "get": {
        "operationId": "getFilterDetails",
        "summary": "Get filter details",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          },
          {
            "name": "filterId",
            "required": true,
            "in": "path",
            "description": "Unique id of the filter",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilterDetails" }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account or filter found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Filters"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "put": {
        "operationId": "updateFilter",
        "summary": "Update existing filter",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          },
          {
            "name": "filterId",
            "required": true,
            "in": "path",
            "description": "Unique id of the filter",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUpdateFilterDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Account updated successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account or filter found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Filters"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request PUT \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Mark as seen from John\",\"disabled\":false,\"query\":{\"from\":\"John\",\"to\":\"John\",\"subject\":\"You have 1 new notification\",\"listId\":\"John'\\''s list\",\"text\":\"Dedicated servers\",\"ha\":false,\"size\":1000},\"action\":{\"seen\":true,\"flag\":true,\"delete\":true,\"spam\":true,\"mailbox\":\"5a1c0ee490a34c67e266932c\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"]}}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Mark as seen from John',\n  disabled: false,\n  query: {\n    from: 'John',\n    to: 'John',\n    subject: 'You have 1 new notification',\n    listId: 'John\\'s list',\n    text: 'Dedicated servers',\n    ha: false,\n    size: 1000\n  },\n  action: {\n    seen: true,\n    flag: true,\n    delete: true,\n    spam: true,\n    mailbox: '5a1c0ee490a34c67e266932c',\n    targets: ['johndoe@example.com', 'smtp://mx.example.com:25', 'https://example.com']\n  }\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"Mark as seen from John\",\n  \"disabled\": false,\n  \"query\": {\n    \"from\": \"John\",\n    \"to\": \"John\",\n    \"subject\": \"You have 1 new notification\",\n    \"listId\": \"John's list\",\n    \"text\": \"Dedicated servers\",\n    \"ha\": false,\n    \"size\": 1000\n  },\n  \"action\": {\n    \"seen\": true,\n    \"flag\": true,\n    \"delete\": true,\n    \"spam\": true,\n    \"mailbox\": \"5a1c0ee490a34c67e266932c\",\n    \"targets\": [\n      \"johndoe@example.com\",\n      \"smtp://mx.example.com:25\",\n      \"https://example.com\"\n    ]\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PUT\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    },
    "/accounts/{accountId}/filters": {
      "get": {
        "operationId": "getFilters",
        "summary": "List filters",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of filters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FilterListItem" }
                }
              }
            }
          },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Filters"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request GET \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D/filters \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D/filters\",\n  \"headers\": {\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\nheaders = { 'authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/accounts/%7BaccountId%7D/filters\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D/filters\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://localhost:3000/accounts/%7BaccountId%7D/filters\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      },
      "post": {
        "operationId": "createFilter",
        "summary": "Create a new filter",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Unique id of the account",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUpdateFilterDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Filter created successfully" },
          "400": { "description": "Error that is resolvable user side" },
          "401": { "description": "Invalid or expired token" },
          "404": { "description": "No account found with this id" },
          "500": {
            "description": "Server error that is not resolvable user side"
          }
        },
        "tags": ["Filters"],
        "security": [{ "bearer": [] }],
        "x-code-samples": [
          {
            "lang": "Shell",
            "label": "Curl",
            "source": "curl --request POST \\\n  --url http://localhost:3000/accounts/%7BaccountId%7D/filters \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Mark as seen from John\",\"disabled\":false,\"query\":{\"from\":\"John\",\"to\":\"John\",\"subject\":\"You have 1 new notification\",\"listId\":\"John'\\''s list\",\"text\":\"Dedicated servers\",\"ha\":false,\"size\":1000},\"action\":{\"seen\":true,\"flag\":true,\"delete\":true,\"spam\":true,\"mailbox\":\"5a1c0ee490a34c67e266932c\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"]}}'"
          },
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "var http = require(\"http\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/accounts/%7BaccountId%7D/filters\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Mark as seen from John',\n  disabled: false,\n  query: {\n    from: 'John',\n    to: 'John',\n    subject: 'You have 1 new notification',\n    listId: 'John\\'s list',\n    text: 'Dedicated servers',\n    ha: false,\n    size: 1000\n  },\n  action: {\n    seen: true,\n    flag: true,\n    delete: true,\n    spam: true,\n    mailbox: '5a1c0ee490a34c67e266932c',\n    targets: ['johndoe@example.com', 'smtp://mx.example.com:25', 'https://example.com']\n  }\n}));\nreq.end();"
          },
          {
            "lang": "JavaScript",
            "label": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"name\": \"Mark as seen from John\",\n  \"disabled\": false,\n  \"query\": {\n    \"from\": \"John\",\n    \"to\": \"John\",\n    \"subject\": \"You have 1 new notification\",\n    \"listId\": \"John's list\",\n    \"text\": \"Dedicated servers\",\n    \"ha\": false,\n    \"size\": 1000\n  },\n  \"action\": {\n    \"seen\": true,\n    \"flag\": true,\n    \"delete\": true,\n    \"spam\": true,\n    \"mailbox\": \"5a1c0ee490a34c67e266932c\",\n    \"targets\": [\n      \"johndoe@example.com\",\n      \"smtp://mx.example.com:25\",\n      \"https://example.com\"\n    ]\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\n\nxhr.send(data);"
          },
          {
            "lang": "Python",
            "label": "Python3",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"localhost:3000\")\n\npayload = \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/accounts/%7BaccountId%7D/filters\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "PHP",
            "label": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_PORT => \"3000\",\n  CURLOPT_URL => \"http://localhost:3000/accounts/%7BaccountId%7D/filters\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\",\n  CURLOPT_HTTPHEADER => array(\n    \"authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://localhost:3000/accounts/%7BaccountId%7D/filters\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\")\n  .asString();"
          },
          {
            "lang": "C#",
            "label": "C#",
            "source": "var client = new RestClient(\"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "C",
            "label": "C",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"http://localhost:3000/accounts/%7BaccountId%7D/filters\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\nheaders = curl_slist_append(headers, \"authorization: Bearer REPLACE_BEARER_TOKEN\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"name\\\":\\\"Mark as seen from John\\\",\\\"disabled\\\":false,\\\"query\\\":{\\\"from\\\":\\\"John\\\",\\\"to\\\":\\\"John\\\",\\\"subject\\\":\\\"You have 1 new notification\\\",\\\"listId\\\":\\\"John's list\\\",\\\"text\\\":\\\"Dedicated servers\\\",\\\"ha\\\":false,\\\"size\\\":1000},\\\"action\\\":{\\\"seen\\\":true,\\\"flag\\\":true,\\\"delete\\\":true,\\\"spam\\\":true,\\\"mailbox\\\":\\\"5a1c0ee490a34c67e266932c\\\",\\\"targets\\\":[\\\"johndoe@example.com\\\",\\\"smtp://mx.example.com:25\\\",\\\"https://example.com\\\"]}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          }
        ]
      }
    }
  }
}
